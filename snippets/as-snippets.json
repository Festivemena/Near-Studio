{
  "Near AssemblyScript Contract": {
    "prefix": "near-contract-as",
    "body": [
      "import { Context, logging, storage, PersistentUnorderedMap } from 'near-sdk-as';",
      "",
      "const data = new PersistentUnorderedMap<string, string>('data');",
      "",
      "export function init(owner: string = ''): void {",
      "    assert(!storage.contains('initialized'), 'Contract already initialized');",
      "    const contractOwner = owner || Context.sender;",
      "    storage.set('owner', contractOwner);",
      "    storage.set('initialized', 'true');",
      "}",
      "",
      "export function ${1:methodName}(${2:param: string}): ${3:string} {",
      "    ${4:// Method implementation}",
      "    return ${5:result};",
      "}"
    ],
    "description": "Create a basic Near AssemblyScript contract"
  },
  "Near AS View Function": {
    "prefix": "near-view-as",
    "body": [
      "export function ${1:viewMethod}(${2:param: string}): ${3:string} {",
      "    ${4:// View method implementation}",
      "    return ${5:result};",
      "}"
    ],
    "description": "Create a view function in AssemblyScript"
  },
  "Near AS Change Function": {
    "prefix": "near-call-as",
    "body": [
      "export function ${1:changeMethod}(${2:param: string}): ${3:void} {",
      "    ${4:// Change method implementation}",
      "}"
    ],
    "description": "Create a change function in AssemblyScript"
  },
  "Near AS Payable Function": {
    "prefix": "near-payable-as",
    "body": [
      "@payable",
      "export function ${1:payableMethod}(${2:param: string}): ${3:string} {",
      "    const deposit = Context.attachedDeposit;",
      "    ${4:// Payable method implementation}",
      "    return ${5:result};",
      "}"
    ],
    "description": "Create a payable function in AssemblyScript"
  },
  "Near AS Storage Operations": {
    "prefix": "near-storage-as",
    "body": [
      "import { PersistentUnorderedMap, PersistentVector } from 'near-sdk-as';",
      "",
      "const ${1:mapName} = new PersistentUnorderedMap<${2:KeyType}, ${3:ValueType}>('${4:prefix}');",
      "const ${5:vectorName} = new PersistentVector<${6:ItemType}>('${7:prefix}');"
    ],
    "description": "Add storage collections in AssemblyScript"
  },
  "Near AS Assert Owner": {
    "prefix": "near-assert-owner-as",
    "body": [
      "const owner = storage.getSome<string>('owner');",
      "assert(Context.sender == owner, 'Only owner can call this method');"
    ],
    "description": "Assert that caller is the owner in AssemblyScript"
  },
  "Near AS Cross Contract Call": {
    "prefix": "near-cross-contract-as",
    "body": [
      "import { ContractPromise, ContractPromiseBatch } from 'near-sdk-as';",
      "",
      "export function ${1:callExternal}(${2:contractId: string, param: string}): void {",
      "    const promise = ContractPromiseBatch.create(contractId);",
      "    promise.function_call(",
      "        '${3:method_name}',",
      "        '{\"${4:param}\": \"' + ${2:param} + '\"}',",
      "        ${5:0}, // deposit",
      "        ${6:30000000000000} // gas",
      "    );",
      "}"
    ],
    "description": "Create cross-contract call in AssemblyScript"
  },
  "Near AS Event Logging": {
    "prefix": "near-event-as",
    "body": [
      "logging.log(",
      "    JSON.stringify({",
      "        standard: '${1:nep171}',",
      "        version: '${2:1.0.0}',",
      "        event: '${3:transfer}',",
      "        data: {",
      "            ${4:// event data}",
      "        }",
      "    })",
      ");"
    ],
    "description": "Log a structured event in AssemblyScript"
  },
  "Near AS Init Function": {
    "prefix": "near-init-as",
    "body": [
      "export function init(${1:param: string}): void {",
      "    assert(!storage.contains('initialized'), 'Contract already initialized');",
      "    ${2:// Initialization logic}",
      "    storage.set('initialized', 'true');",
      "}"
    ],
    "description": "Create an initialization function in AssemblyScript"
  },
  "Near AS Callback Function": {
    "prefix": "near-callback-as",
    "body": [
      "export function ${1:callbackMethod}(): ${2:string} {",
      "    const results = ContractPromise.getResults();",
      "    assert(results.length > 0, 'No callback results');",
      "    ",
      "    const result = results[0];",
      "    if (result.success) {",
      "        ${3:// Handle success}",
      "        return ${4:successResult};",
      "    } else {",
      "        ${5:// Handle failure}",
      "        return ${6:failureResult};",
      "    }",
      "}"
    ],
    "description": "Create a callback function for cross-contract calls"
  },
  "Near AS Test Function": {
    "prefix": "near-test-as",
    "body": [
      "import { ${1:functionName} } from '../index';",
      "import { VMContext } from 'near-sdk-as';",
      "",
      "describe('${2:TestSuite}', () => {",
      "    beforeEach(() => {",
      "        VMContext.setCurrent_account_id('contract.testnet');",
      "        VMContext.setSigner_account_id('alice.testnet');",
      "        VMContext.setPredecessor_account_id('alice.testnet');",
      "    });",
      "",
      "    it('${3:should do something}', () => {",
      "        ${4:// Test implementation}",
      "        expect(${1:functionName}(${5:params})).toBe(${6:expectedResult});",
      "    });",
      "});"
    ],
    "description": "Create a test function for AssemblyScript contract"
  },
  "Near AS Class Structure": {
    "prefix": "near-class-as",
    "body": [
      "@nearBindgen",
      "export class ${1:ClassName} {",
      "    ${2:property}: ${3:string};",
      "",
      "    constructor(${4:param}: ${5:string}) {",
      "        this.${2:property} = ${4:param};",
      "    }",
      "",
      "    ${6:method}(): ${7:string} {",
      "        return this.${2:property};",
      "    }",
      "}"
    ],
    "description": "Create a class structure in AssemblyScript"
  },
  "Near AS Array Operations": {
    "prefix": "near-array-as",
    "body": [
      "import { PersistentVector } from 'near-sdk-as';",
      "",
      "const ${1:arrayName} = new PersistentVector<${2:ItemType}>('${3:prefix}');",
      "",
      "export function add${4:Item}(${5:item}: ${2:ItemType}): void {",
      "    ${1:arrayName}.push(${5:item});",
      "}",
      "",
      "export function get${4:Item}(${6:index}: i32): ${2:ItemType} {",
      "    return ${1:arrayName}[${6:index}];",
      "}",
      "",
      "export function get${4:Item}Count(): i32 {",
      "    return ${1:arrayName}.length;",
      "}"
    ],
    "description": "Create array operations in AssemblyScript"
  },
  "Near AS Map Operations": {
    "prefix": "near-map-as",
    "body": [
      "import { PersistentUnorderedMap } from 'near-sdk-as';",
      "",
      "const ${1:mapName} = new PersistentUnorderedMap<${2:KeyType}, ${3:ValueType}>('${4:prefix}');",
      "",
      "export function set${5:Item}(${6:key}: ${2:KeyType}, ${7:value}: ${3:ValueType}): void {",
      "    ${1:mapName}.set(${6:key}, ${7:value});",
      "}",
      "",
      "export function get${5:Item}(${6:key}: ${2:KeyType}): ${3:ValueType} | null {",
      "    return ${1:mapName}.get(${6:key});",
      "}",
      "",
      "export function has${5:Item}(${6:key}: ${2:KeyType}): bool {",
      "    return ${1:mapName}.contains(${6:key});",
      "}"
    ],
    "description": "Create map operations in AssemblyScript"
  }
}